generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  passwordHash            String
  name                    String?
  isPremium               Boolean   @default(false)
  scanCreditsRemaining    Int       @default(5)
  weightGoal              Float?
  calorieLimit            Int?
  createdAt               DateTime  @default(now())
  scans                   Scan[]
  dailyIntakeLogs         DailyIntakeLog[]
  assistantLogs           PersonalAssistantLog[]
}

model Scan {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  imageUrl    String
  scanMode    ScanMode
  scannedAt   DateTime  @default(now())
  recipe      Recipe?   @relation(fields: [recipeId], references: [id])
  recipeId    String?
  intakeLog   DailyIntakeLog?
  openAIResp  OpenAIResponse?
}

enum ScanMode {
  default
  vision    
}

model Recipe {
  id                String          @id @default(uuid())
  name              String
  predicted_name    String          @unique
  summary           String
  thumbnailUrls     String[]        
  culturalContext   String?
  funFacts          String[]
  badgeKeys         String[]
  tips              String[]
  nutritionSnapshot NutritionSnapshot?
  nutritionItems    NutritionItem[]
  ingredients       Ingredient[]
  instructions      Instruction[]
  variations        Variation[]
  scans             Scan[]
}

model NutritionSnapshot {
  id        String  @id @default(uuid())
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  String  @unique
  calories  Int
  protein   Float
  fat       Float
  carbs     Float
  fiber     Float
  sugar     Float
  sodium    Int
}

model NutritionItem {
  id        String  @id @default(uuid())
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  String
  name      String
  value     Float
  unit      String
}

model Ingredient {
  id         String           @id @default(uuid())
  recipe     Recipe           @relation(fields: [recipeId], references: [id])
  recipeId   String
  groupName  String
  items      IngredientItem[]
}

model IngredientItem {
  id              String      @id @default(uuid())
  ingredientGroup Ingredient  @relation(fields: [groupId], references: [id])
  groupId         String
  item            String
}

model Instruction {
  id          String   @id @default(uuid())
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    String
  stepNumber  Int
  description String
  duration    String?
}

model Variation {
  id        String  @id @default(uuid())
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  String
  name      String
  add       String?
  swap      String?
}

model DailyIntakeLog {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  scan       Scan     @relation(fields: [scanId], references: [id])
  scanId     String   @unique
  date       DateTime
  mealType   MealType
  notes      String?
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

model PersonalAssistantLog {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  alertType  String
  message    String
  createdAt  DateTime @default(now())
}

model OpenAIResponse {
  id         String   @id @default(uuid())
  scan       Scan     @relation(fields: [scanId], references: [id])
  scanId     String   @unique
  raw        Json
  createdAt  DateTime @default(now())
}

